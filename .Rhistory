##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
#get base model
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=NA)
#get base model
base <- build_base(input_file_path = "C:\Users\hamzajuzer\Documents\LocationEdge\InputFiles",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=NA)
#source other files
source("optimisation.R")
#get base model
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=NA)
#source other files
source("optimisation.R")
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=NA)
input_file_path
LSOA_demand_surface <- "LSOA Demand Surface.csv"
LSOA_demand_surface <- paste(input_file_path,LSOA_demand_surface, sep="")
LSOA_demand_surface
##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
#get base model
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles\\",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=NA)
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles\\",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=c(3,4))
##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
#get base model
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles\\",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=c(3,4))
filter_stores
store <- as.data.frame(store)
filter_stores <- rbind(filter_stores, store)
filter_stores <- subset(filter_stores, !duplicated(subset(filter_stores, select=c(store))))
n_filtered_stores <- dim(filter_stores)[1]
filter_stores
##main script
# Remove all the objects we created so far.
rm(list = ls())
##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles\\",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=NA)
#get base model
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles\\",
output_csv=TRUE, output_spec="new",
apply_rules=FALSE, apply_min_turnover=NA, apply_store_filter=NA)
##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
#run optimisation
opt_res <- optimise(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles\\",
use_distance_estimate_measure=TRUE,
max_dist_LSOA_km=25,
max_dist_store_LSOA_km=15,
min_demand=50000,
top_n_perc=10,
type_S2='AVG',
type_S3='greedy',
apply_rules=TRUE,
apply_min_turnover=15000,
apply_store_filter=NA,
competition_distance_KM=1,
max_LSOA_dist_km=5,
top_stores=10)
dim(opt_res)
names(opt_res)
head(opt_res$S92000003)
tail(opt_res$S92000003)
tail(opt_res$S92000003)
head(opt_res$S92000003)
dim(opt_res$S92000003)
tail(opt_res$S92000003)
1926+500
names(opt_res)
head(opt_res$E12000005)
opt_res$E12000005[1920:1926,]
opt_res$E12000005[1:2,]
opt_res$E12000005[1:2,demand]
opt_res$E12000005[1:2,demand]
opt_res$E12000005
names(opt_res)
opt_res$W92000004
opt_res$W92000004$Gravity_model_store_predictions
dim(opt_res$W92000004$Gravity_model_store_predictions)
tail(opt_res$W92000004$Gravity_model_store_predictions)
opt_res$W92000004$Gravity_model_store_predictions[2410:2426,]
names(opt_res)
opt_res$E12000005$Gravity_model_store_predictions[2410:2426,]
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles\\",
output_csv=FALSE, output_spec=NA,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=NA)
fwrite(base$Gravity_model_store_predictions, file = paste("base_","store_demand",".csv"), row.names=FALSE)
for(rgn in names(opt_res))
{
fwrite(opt_res[["rgn"]]$Gravity_model_store_predictions, file = paste(rgn,"_store_demand",".csv"), row.names=FALSE)
}
fwrite(opt_res[[rgn]]$Gravity_model_store_predictions, file = paste(rgn,"_store_demand",".csv"), row.names=FALSE)
for(rgn in names(opt_res))
{
fwrite(opt_res[[rgn]]$Gravity_model_store_predictions, file = paste(rgn,"_store_demand",".csv"), row.names=FALSE)
}
for(rgn in names(opt_res))
{
message(rgn)
#fwrite(opt_res[[rgn]]$Gravity_model_store_predictions, file = paste(rgn,"_store_demand",".csv"), row.names=FALSE)
}
for(rgn in names(opt_res))
{
message(rgn)
tail(opt_res[[rgn]]$Gravity_model_store_predictions)
#fwrite(opt_res[[rgn]]$Gravity_model_store_predictions, file = paste(rgn,"_store_demand",".csv"), row.names=FALSE)
}
rgbn
rgn
tail(opt_res[[rgn]]$Gravity_model_store_predictions)
for(rgn in names(opt_res))
{
message(rgn)
#tail(opt_res[[rgn]]$Gravity_model_store_predictions)
fwrite(opt_res[[rgn]]$Gravity_model_store_predictions, file = paste(rgn,"_store_demand",".csv"), row.names=FALSE)
}
for(rgn in names(opt_res))
{
message(rgn)
#tail(opt_res[[rgn]]$Gravity_model_store_predictions)
fwrite(opt_res[[rgn]]$Gravity_model_store_predictions, file = paste(rgn,"_store_demand",".csv"), row.names=FALSE)
}
compare_scenarios <- function(arg_x,
arg_y){
#Compare the demand outputs of demand predictions 1 vs demand predictions 2
#First lets rename some cols
arg_x$Gravity_model_store_predictions <- plyr::rename(arg_x$Gravity_model_store_predictions,
c("store"="store.x", "demand"="demand.x"))
arg_y$Gravity_model_store_predictions <- plyr::rename(arg_y$Gravity_model_store_predictions,
c("store"="store.y", "demand"="demand.y"))
similar_store_demand <- merge(arg_x$Gravity_model_store_predictions,
arg_y$Gravity_model_store_predictions,
by.x="store.x", by.y="store.y")
#Find the difference
similar_store_demand$demand_difference <- similar_store_demand$demand.x - similar_store_demand$demand.y
#Remove unnecessary cols and rename
similar_store_demand = select(similar_store_demand, -store.y)
arg_x$Gravity_model_store_predictions <- plyr::rename(arg_x$Gravity_model_store_predictions,
c("store.x"="store"))
}
comparison <- compare_scenarios(base, opt_res$E12000005)
dim(comparison)
comparison
comparison <- compare_scenarios(base, opt_res$E12000005)
compare_scenarios <- function(arg_x,
arg_y){
#Compare the demand outputs of demand predictions 1 vs demand predictions 2
#First lets rename some cols
arg_x$Gravity_model_store_predictions <- plyr::rename(arg_x$Gravity_model_store_predictions,
c("store"="store.x", "demand"="demand.x"))
arg_y$Gravity_model_store_predictions <- plyr::rename(arg_y$Gravity_model_store_predictions,
c("store"="store.y", "demand"="demand.y"))
similar_store_demand <- merge(arg_x$Gravity_model_store_predictions,
arg_y$Gravity_model_store_predictions,
by.x="store.x", by.y="store.y")
#Find the difference
similar_store_demand$demand_difference <- similar_store_demand$demand.x - similar_store_demand$demand.y
#Remove unnecessary cols and rename
#similar_store_demand = select(similar_store_demand, -store.y)
arg_x$Gravity_model_store_predictions <- plyr::rename(arg_x$Gravity_model_store_predictions,
c("store.x"="store"))
}
comparison <- compare_scenarios(base, opt_res$E12000005)
names(comparison)
debugSource('~/LocationEdge/NetworkStoreOptimisation/optimisation.R')
comparison <- compare_scenarios(base, opt_res$E12000005)
arg_x
names(arg_x)
names(arg_y)
names(arg_x$Gravity_model_store_predictions)
names(arg_y$Gravity_model_store_predictions)
names(similar_store_demand)
names(similar_store_demand)
compare_scenarios <- function(arg_x,
arg_y){
#Compare the demand outputs of demand predictions 1 vs demand predictions 2
#First lets rename some cols
arg_x$Gravity_model_store_predictions <- plyr::rename(arg_x$Gravity_model_store_predictions,
c("store"="store.x", "demand"="demand.x"))
arg_y$Gravity_model_store_predictions <- plyr::rename(arg_y$Gravity_model_store_predictions,
c("store"="store.y", "demand"="demand.y"))
similar_store_demand <- merge(arg_x$Gravity_model_store_predictions,
arg_y$Gravity_model_store_predictions,
by.x="store.x", by.y="store.y")
#Find the difference
similar_store_demand$demand_difference <- similar_store_demand$demand.x - similar_store_demand$demand.y
#Remove unnecessary cols and rename
#similar_store_demand = select(similar_store_demand, -store.y)
arg_x$Gravity_model_store_predictions <- plyr::rename(arg_x$Gravity_model_store_predictions,
c("store.x"="store"))
return(similar_store_demand)
}
comparison <- compare_scenarios(base, opt_res$E12000005)
comparison
names(comparison)
compare_scenarios <- function(arg_x,
arg_y){
#Compare the demand outputs of demand predictions 1 vs demand predictions 2
#First lets rename some cols
arg_x$Gravity_model_store_predictions <- plyr::rename(arg_x$Gravity_model_store_predictions,
c("store"="store.x", "demand"="demand.x"))
arg_y$Gravity_model_store_predictions <- plyr::rename(arg_y$Gravity_model_store_predictions,
c("store"="store.y", "demand"="demand.y"))
similar_store_demand <- merge(arg_x$Gravity_model_store_predictions,
arg_y$Gravity_model_store_predictions,
by.x="store.x", by.y="store.y")
#Find the difference
similar_store_demand$demand_difference <- similar_store_demand$demand.x - similar_store_demand$demand.y
#Remove unnecessary cols and rename
similar_store_demand <- plyr::rename(similar_store_demand, c("store.x"="store"))
return(similar_store_demand)
}
comparison <- compare_scenarios(base, opt_res$E12000005)
names(comparison)
head(comparison)
tail(comparison)
comparison[order(comparison$demand_difference),]
head(comparison[order(comparison$demand_difference),])
tail(comparison[order(comparison$demand_difference),])
##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
#run individual scenario
non_opt_res <- calc_non_opt_demand(input_file_path = "F:\\InputFiles\\",
apply_rules=TRUE,
apply_min_turnover=50000,
apply_store_filter=NA,
competition_distance_KM=1,
max_LSOA_dist_km=5,
store_name="new_store",
store_lat=53.44819,
store_long=-1.922393,
retail_centre_type="NA", store_size=20000, scaling_factor=0.14)
##main script
# Remove all the objects we created so far.
rm(list = ls())
#source other files
source("optimisation.R")
#get base model
base <- build_base(input_file_path = "C:\\Users\\hamzajuzer\\Documents\\LocationEdge\\InputFiles\\",
output_csv=TRUE, output_spec=NULL,
apply_rules=TRUE, apply_min_turnover=15000, apply_store_filter=NA, scaling_factor=0.14)
##main script
# Remove all the objects we created so far.
rm(list = ls())
pwd
install.packages("Rserve")
